const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    if (!this.apiKey) {
      console.error('GEMINI_API_KEY is not set in environment variables');
    }
    this.genAI = new GoogleGenerativeAI(this.apiKey);
    // Use gemini-2.0-flash-exp - Faster experimental Flash model
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });
  }

  // System prompt for the chatbot's context and behavior
  getSystemPrompt(language = 'en') {
    return `You are EduDBT Assistant, helping Indian students with Aadhaar, DBT, and scholarships.

**Response Rules:**
- Keep answers SHORT and CONCISE (3-4 sentences or 5-6 bullet points maximum)
- Get straight to the point - no long introductions
- Use simple language students understand
- For complex topics, provide only the most essential steps
- Mention key portals: UIDAI (uidai.gov.in), NSP (scholarships.gov.in)
- If topic needs detail, suggest: "Visit Learning Center for full guide"

**Topics**: Aadhaar linking, DBT enabling, scholarships, bank accounts, documents, troubleshooting

**Language**: Respond in ${this.getLanguageName(language)}`;
  }

  getLanguageName(code) {
    const languages = {
      en: 'English',
      hi: 'Hindi (рд╣рд┐рдВрджреА)',
      bn: 'Bengali (ржмрж╛ржВрж▓рж╛)',
      mr: 'Marathi (рдорд░рд╛рдареА)',
      te: 'Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)',
      ta: 'Tamil (родрооро┐ро┤рпН)',
      gu: 'Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)',
      ur: 'Urdu (╪з╪▒╪п┘И)',
      kn: 'Kannada (р▓Хр▓ир│Нр▓ир▓б)',
      or: 'Odia (рмУрмбрм╝рм┐рмЖ)',
      ml: 'Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)',
      pa: 'Punjabi (рикрй░риЬри╛римрйА)',
      as: 'Assamese (ржЕрж╕ржорзАржпрж╝рж╛)'
    };
    return languages[code] || 'English';
  }

  // Build conversation history for context
  buildConversationHistory(messages, language) {
    const history = [
      {
        role: 'user',
        parts: [{ text: this.getSystemPrompt(language) }]
      },
      {
        role: 'model',
        parts: [{ text: 'Understood. I will provide brief, helpful answers.' }]
      }
    ];

    // Add recent conversation history (last 6 messages for faster context)
    const recentMessages = messages.slice(-6);
    recentMessages.forEach(msg => {
      history.push({
        role: msg.role === 'user' ? 'user' : 'model',
        parts: [{ text: msg.content }]
      });
    });

    return history;
  }

  // Generate a response using Gemini AI
  async generateResponse(userMessage, conversationHistory = [], language = 'en') {
    try {
      console.log('GeminiService: Starting response generation');
      console.log('API Key present:', !!this.apiKey);
      
      if (!this.apiKey) {
        console.error('GeminiService: API key is missing!');
        throw new Error('Gemini API key is not configured');
      }

      // Build the full conversation context
      const history = this.buildConversationHistory(conversationHistory, language);
      console.log('GeminiService: Built conversation history with', history.length, 'entries');

      // Start a chat session with history
      const chat = this.model.startChat({
        history: history
      });

      console.log('GeminiService: Sending message to Gemini API...');
      // Send the user's message
      const result = await chat.sendMessage(userMessage);
      const response = await result.response;
      const text = response.text();
      
      console.log('GeminiService: Raw response:', text);
      console.log('GeminiService: Response length:', text?.length || 0);

      console.log('GeminiService: Received response, length:', text.length);

      return {
        success: true,
        message: text,
        tokensUsed: response.usageMetadata
      };

    } catch (error) {
      console.error('GeminiService: Error occurred:', error.message);
      console.error('GeminiService: Error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack?.split('\n')[0]
      });
      
      // Provide helpful fallback responses
      return {
        success: false,
        message: this.getFallbackResponse(language),
        error: error.message
      };
    }
  }

  // Fallback response when API fails
  getFallbackResponse(language) {
    const fallbacks = {
      en: "I apologize, but I'm having trouble connecting to my AI service right now. For immediate help, please:\n\nтАв Visit the Learning Center for detailed guides\nтАв Check the Help page for common questions\nтАв Contact support at support@edudbt.gov.in\nтАв Call the National Scholarship Portal helpline: 0120-6619540",
      hi: "рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рд▓реЗрдХрд┐рди рдореБрдЭреЗ рдЕрдкрдиреА AI рд╕реЗрд╡рд╛ рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛:\n\nтАв рд╡рд┐рд╕реНрддреГрдд рдЧрд╛рдЗрдб рдХреЗ рд▓рд┐рдП рд▓рд░реНрдирд┐рдВрдЧ рд╕реЗрдВрдЯрд░ рдкрд░ рдЬрд╛рдПрдБ\nтАв рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рд▓рд┐рдП рд╣реЗрд▓реНрдк рдкреЗрдЬ рджреЗрдЦреЗрдВ\nтАв support@edudbt.gov.in рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ\nтАв рд░рд╛рд╖реНрдЯреНрд░реАрдп рдЫрд╛рддреНрд░рд╡реГрддреНрддрд┐ рдкреЛрд░реНрдЯрд▓ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ: 0120-6619540"
    };
    return fallbacks[language] || fallbacks.en;
  }

  // Quick response for common queries (reduce API calls)
  getQuickResponse(message, language = 'en') {
    const lowerMessage = message.toLowerCase();
    
    // Common greetings
    if (['hi', 'hello', 'hey', 'namaste', 'рдирдорд╕реНрддреЗ'].some(greeting => lowerMessage.includes(greeting))) {
      const greetings = {
        en: "Hello! ЁЯСЛ I'm your EduDBT assistant. Ask me about Aadhaar linking, DBT, scholarships, or documents. What do you need help with?",
        hi: "рдирдорд╕реНрддреЗ! ЁЯСЛ рдореИрдВ рдЖрдкрдХрд╛ EduDBT рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдзрд╛рд░ рд▓рд┐рдВрдХрд┐рдВрдЧ, DBT, рдЫрд╛рддреНрд░рд╡реГрддреНрддрд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред рдЖрдкрдХреЛ рдХреНрдпрд╛ рдЪрд╛рд╣рд┐рдП?"
      };
      return greetings[language] || greetings.en;
    }

    // Thank you messages
    if (['thank', 'thanks', 'рдзрдиреНрдпрд╡рд╛рдж'].some(word => lowerMessage.includes(word))) {
      const thanks = {
        en: "You're welcome! ЁЯШК Feel free to ask more questions.",
        hi: "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯШК рдФрд░ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВред"
      };
      return thanks[language] || thanks.en;
    }

    return null; // Let Gemini handle other queries
  }
}

module.exports = new GeminiService();
